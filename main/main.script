local world = require "main.world"
local cell = require "main.cell"

local function set_tilemap(self, the_map)
	print("Setting tilemap")
	local short_tilemap = world.tilemaps[the_map]
	local size_x, size_y, width, height = tilemap.get_bounds(short_tilemap.url)

	short_tilemap.size = {
		x = size_x,
		y = size_y,
		width = width,
		height = height,
	}
end

local function set_cells(self, the_map)
	local short_tilemap = world.tilemaps[the_map]

	for tilemap_layer in pairs(short_tilemap.layers) do
		local layer = short_tilemap.layers[tilemap_layer]
		short_tilemap.grid[layer] = {}
		for i = short_tilemap.size.x, short_tilemap.size.width do
			short_tilemap.grid[layer][i] = {}
			for j = short_tilemap.size.y, short_tilemap.size.height do
				local current_tile = tilemap.get_tile(short_tilemap.url, layer, i, j)
				local direction = {start = "none", finish = "none"}
				local tile = {start = 0, finish = 0}
				local name = short_tilemap.name
				local is_targetable = short_tilemap.is_targetable
				local is_showing_cursor = short_tilemap.is_showing_cursor
				local is_destroyable = false
				local type_info = {
					type = world.NORMAL,
					input = {},
					output = {},
				}

				if layer == "belts" then
					if current_tile == 1 then direction = {start = "down", finish = "down"}
					elseif current_tile == 5 then direction = {start = "down", finish = "left"}
					elseif current_tile == 9 then direction = {start = "up", finish = "up"}
					elseif current_tile == 13 then direction = {start = "left", finish = "up"}
					elseif current_tile == 17 then direction = {start = "right", finish = "right"}
					elseif current_tile == 21 then direction = {start = "up", finish = "right"}
					elseif current_tile == 25 then direction = {start = "left", finish = "left"}
					elseif current_tile == 29 then direction = {start = "right", finish = "down"}
					elseif current_tile == 37 then direction = {start = "right", finish = "up"}
					elseif current_tile == 45 then direction = {start = "down", finish = "right"}
					elseif current_tile == 53 then direction = {start = "left", finish = "down"}
					elseif current_tile == 61 then direction = {start = "up", finish = "left"}

					-- SPLIT
					elseif current_tile == 65 then
						direction = {start = "down_right_down_left", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {"up"},
								next = "up",
							},
							output = {
								directions = {"right", "down", "left"},
								next = "right",
							},
						}
					elseif current_tile == 73 then
						direction = {start = "down_right_down", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {"up"},
								next = "up",
							},
							output = {
								directions = {"right", "down"},
								next = "right",
							},
						}
					elseif current_tile == 81 then
						direction = {start = "down_down_left", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {"up"},
								next = "up",
							},
							output = {
								directions = {"down", "left"},
								next = "down",
							},
						}
					elseif current_tile == 89 then
						direction = {start = "down_right_left", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {"up"},
								next = "up",
							},
							output = {
								directions = {"right", "left"},
								next = "right",
							},
						}
					elseif current_tile == 97 then
						direction = {start = "down_down", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {"up"},
								next = "up",
							},
							output = {
								directions = {"down"},
								next = "down",
							},
						}
					elseif current_tile == 105 then
						direction = {start = "down_right", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {"up"},
								next = "up",
							},
							output = {
								directions = {"right"},
								next = "right",
							},
						}
					elseif current_tile == 113 then
						direction = {start = "down_left", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {"up"},
								next = "up",
							},
							output = {
								directions = {"left"},
								next = "left",
							},
						}
					elseif current_tile == 121 then
						direction = {start = "down_none", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {"up"},
								next = "up",
							},
							output = {
								directions = {},
								next = "",
							},
						}
					elseif current_tile == 125 then
						direction = {start = "none_none", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {},
								next = "",
							},
							output = {
								directions = {},
								next = "",
							},
						}
					elseif current_tile == 69 then
						direction = {start = "none_right_down_left", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {},
								next = "",
							},
							output = {
								directions = {"right", "down", "left"},
								next = "right",
							},
						}
					elseif current_tile == 77 then
						direction = {start = "none_right_down", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {},
								next = "",
							},
							output = {
								directions = {"right", "down"},
								next = "right",
							},
						}
					elseif current_tile == 85 then
						direction = {start = "none_down_left", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {},
								next = "",
							},
							output = {
								directions = {"down", "left"},
								next = "down",
							},
						}
					elseif current_tile == 93 then
						direction = {start = "none_right_left", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {},
								next = "",
							},
							output = {
								directions = {"right", "left"},
								next = "right",
							},
						}
					elseif current_tile == 101 then
						direction = {start = "none_down", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {},
								next = "",
							},
							output = {
								directions = {"down"},
								next = "down",
							},
						}
					elseif current_tile == 109 then
						direction = {start = "none_right", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {},
								next = "",
							},
							output = {
								directions = {"right"},
								next = "right",
							},
						}
					elseif current_tile == 117 then
						direction = {start = "none_left", finish = "split"}
						type_info = {
							type = world.SPLITTER,
							input = {
								directions = {},
								next = "",
							},
							output = {
								directions = {"left"},
								next = "left",
							},
						}

					-- MERGE
					elseif current_tile == 129 then
						direction = {start = "down_right_down_left", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"right", "down", "left"},
								next = "right",
							},
							output = {
								directions = {"down"},
								next = "down",
							},
						}
					elseif current_tile == 137 then
						direction = {start = "down_right_down", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"right", "down"},
								next = "right",
							},
							output = {
								directions = {"down"},
								next = "down",
							},
						}
					elseif current_tile == 145 then
						direction = {start = "down_down_left", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"down", "left"},
								next = "down",
							},
							output = {
								directions = {"down"},
								next = "down",
							},
						}
					elseif current_tile == 153 then
						direction = {start = "down_right_left", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"right", "left"},
								next = "right",
							},
							output = {
								directions = {"down"},
								next = "down",
							},
						}
					elseif current_tile == 161 then
						direction = {start = "down_down", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"down"},
								next = "down",
							},
							output = {
								directions = {"down"},
								next = "down",
							},
						}
					elseif current_tile == 169 then
						direction = {start = "down_right", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"right"},
								next = "right",
							},
							output = {
								directions = {"down"},
								next = "down",
							},
						}
					elseif current_tile == 177 then
						direction = {start = "down_left", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"left"},
								next = "left",
							},
							output = {
								directions = {"down"},
								next = "down",
							},
						}
					elseif current_tile == 185 then
						direction = {start = "down_none", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {},
								next = "",
							},
							output = {
								directions = {"down"},
								next = "down",
							},
						}
					elseif current_tile == 189 then
						direction = {start = "none_none", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {},
								next = "",
							},
							output = {
								directions = {},
								next = "",
							},
						}
					elseif current_tile == 133 then
						direction = {start = "none_right_down_left", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"right", "down", "left"},
								next = "right",
							},
							output = {
								directions = {},
								next = "",
							},
						}
					elseif current_tile == 141 then
						direction = {start = "none_right_down", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"right", "down"},
								next = "right",
							},
							output = {
								directions = {},
								next = "",
							},
						}
					elseif current_tile == 149 then
						direction = {start = "none_down_left", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"down", "left"},
								next = "down",
							},
							output = {
								directions = {},
								next = "",
							},
						}
					elseif current_tile == 157 then
						direction = {start = "none_right_left", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"right", "left"},
								next = "right",
							},
							output = {
								directions = {},
								next = "",
							},
						}
					elseif current_tile == 165 then
						direction = {start = "none_down", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"down"},
								next = "down",
							},
							output = {
								directions = {},
								next = "",
							},
						}
					elseif current_tile == 173 then
						direction = {start = "none_right", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"right"},
								next = "right",
							},
							output = {
								directions = {},
								next = "",
							},
						}
					elseif current_tile == 181 then
						direction = {start = "none_left", finish = "merge"}
						type_info = {
							type = world.MERGER,
							input = {
								directions = {"left"},
								next = "left",
							},
							output = {
								directions = {},
								next = "",
							},
						}
					end
				end

				short_tilemap.grid[layer][i][j] = cell.new(
					name,
					the_map,
					layer,
					current_tile,
					{start = direction.start, finish = direction.finish},
					{x = i, y = j},
					is_destroyable,
					is_targetable,
					is_showing_cursor,
					type_info
				)
			end
		end
	end
end

local function set_connections(self, the_map)
	local short_tilemap = world.tilemaps[the_map]
	for i = 1, #short_tilemap.grid[short_tilemap.layers[1]] do
		for j = 1, #short_tilemap.grid[short_tilemap.layers[1]][i] do
			local current_cell = short_tilemap.grid[short_tilemap.layers[1]][i][j]
			current_cell:get_neighbors(the_map, short_tilemap.layers[1])
			current_cell:set_connections(current_cell, the_map)
		end
	end
end

local function set_animation_tiles(self, the_map)
	local short_tilemap = world.tilemaps[the_map]

	for layer in pairs(short_tilemap.grid) do
		for i = short_tilemap.size.x, short_tilemap.size.width do
			for j = short_tilemap.size.y, short_tilemap.size.height do
				local current_tile = short_tilemap.grid[layer][i][j].tile

				if current_tile ~= 0 then
					local current_cell = short_tilemap.grid[layer][i][j]
					current_cell:set_animation_tiles()
				end
			end
		end
	end
end

function init(self)
	print("loading")
	set_tilemap(self, world.TILEMAPS_WORLD)
	set_tilemap(self, world.TILEMAPS_TRANSPORTATION_BELT_YELLOW)
	set_tilemap(self, world.TILEMAPS_BUILDING_GRID)
	
	set_cells(self, world.TILEMAPS_WORLD)
	set_cells(self, world.TILEMAPS_TRANSPORTATION_BELT_YELLOW)
	
	set_animation_tiles(self, world.TILEMAPS_TRANSPORTATION_BELT_YELLOW)

	set_connections(self, world.TILEMAPS_TRANSPORTATION_BELT_YELLOW)

	msg.post("/gui#loading_screen", "disable")
end

function final(self)
-- Add finalization code here
-- Learn more: https://defold.com/manuals/script/
-- Remove this function if not needed
end

local function animate_cells(self, dt, the_map)
	local short_tilemap = world.tilemaps[the_map]
	-- Return if not animated
	if not short_tilemap.is_animated then return end

	local cell_animation = short_tilemap.tiles.animation
	
	cell_animation.frame_delay_current = cell_animation.frame_delay_current + 1

	if cell_animation.frame_delay_current > cell_animation.frame_delay - 1 then
		cell_animation.frame_current = cell_animation.frame_current + 1

		if cell_animation.frame_current > cell_animation.frames then
			cell_animation.frame_current = 1
		end
	
		for layer in pairs(short_tilemap.grid) do
			for i = short_tilemap.size.x, short_tilemap.size.width do
				for j = short_tilemap.size.y, short_tilemap.size.height do
					local single_cell = short_tilemap.grid[layer][i][j]

					if single_cell.tile ~= 0 then
						local cell_position = single_cell.position

						tilemap.set_tile(world.tilemaps[the_map].url, single_cell.layer, cell_position.x, cell_position.y, (single_cell.animation.frame_start - 1) + cell_animation.frame_current)
					end
				end
			end
		end

		cell_animation.frame_delay_current = 0
	end
end

function update(self, dt)
	animate_cells(self, dt, "transportation_belt_yellow")
end

function fixed_update(self, dt)
-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
-- Physics section of game.project
-- Add update code here
-- Learn more: https://defold.com/manuals/script/
-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
-- Add message-handling code here
-- Learn more: https://defold.com/manuals/message-passing/
-- Remove this function if not needed
end

function on_input(self, action_id, action)
-- Add input-handling code here. The game object this script is attached to
-- must have acquired input focus:
--
--    msg.post(".", "acquire_input_focus")
--
-- All mapped input bindings will be received. Mouse and touch input will
-- be received regardless of where on the screen it happened.
-- Learn more: https://defold.com/manuals/input/
-- Remove this function if not needed
end

function on_reload(self)
-- Add reload-handling code here
-- Learn more: https://defold.com/manuals/hot-reload/
-- Remove this function if not needed
end
